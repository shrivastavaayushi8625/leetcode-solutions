class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
         Map<Integer, Integer> freq = new HashMap<>();
        long sum = 0, maxSum = 0;
        int left = 0;

        for (int right = 0; right < nums.length; right++) {
            int curr = nums[right];
            sum += curr;
            freq.put(curr, freq.getOrDefault(curr, 0) + 1);

            if (right - left + 1 > k) {
                int remove = nums[left];
                sum -= remove;
                freq.put(remove, freq.get(remove) - 1);
                if (freq.get(remove) == 0) {
                    freq.remove(remove);
                }
                left++;
            }

            if (right - left + 1 == k && freq.size() == k) {
                maxSum = Math.max(maxSum, sum);
            }
        }

        return maxSum;
        
    }
}
